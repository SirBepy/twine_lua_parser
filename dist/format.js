window.storyFormat({
  "name": "Twine to Lua parser",
  "version": "0.0.23",
  "author": "SirBepy",
  "description": "Export your Twine 2 story as a lua file (RobloxStudio)",
  "proofing": false,
  "source": "<html>\r\n\r\n<head>\r\n  <title>{{STORY_NAME}}</title>\r\n  <script type=\"text/javascript\">\r\n    import {Parser as A} from'xml2js';var{keys:b}=Object,c=a=>typeof a=='string',{isArray:d}=Array,e=/\\?\\((?:(\\w+)\\.)?(\\w+)\\s*(==|<|>)\\s*[\"']?([^\"'\\s]+)[\"']?\\)/,f=/\\$(?:(\\w+)\\.)?(\\w+)\\s*=\\s*(\"[^\"]+\"|'[^']+'|\\b\\w+\\b|\\d+)/,g=/\\{\\{.+?\\}\\}/g,h=/^@(\\w+):/,_=B=>{const C=B.findIndex(_a=>_a.includes('<quest>')),_c=B.findIndex(_A=>_A.includes('</quest>')),D=B.slice(C,_c+1);if(C<0)return;if(!_c<0)return alert('You have an opening but no closing quest tag');B.splice(C,_c-C+1);return j(D.join('\\n'))},j=async E=>{const _b=new A(),_d=aA=>{if(!_C[aA]?.[0])throw Error(`Missing important quest parameter: ${aA}`);return _C[aA][0]},_e=_d('objectives'),F=_d('rewards'),G={title:_d('title'),description:_d('description'),links:{onReturn:_d('link-on-return'),onComplete:_d('link-on-complete')},objectives:_e.objective.map(aB=>({text:aB._,id:aB.$.id,type:aB.$.type,goal:aB.$.goal&&parseInt(aB.$.goal)})),rewards:{}};const{quest:_C}=await _b.parseStringPromise(E);F.item&&(G.rewards.items=F.item.reduce((aC,_B)=>{aC[_B.$.id]=parseInt(_B.$.amount??1);return aC},{}));F.prop&&(G.rewards.props=F.prop.reduce((aD,aE)=>{aD[aE.$.id]=parseInt(aE.$.amount??1);return aD},{}));if(!G.objectives.length)throw Error('Need atleast one objective');if(G.objectives.find(aF=>!['progress','check'].includes(aF.type)))throw Error('Objective has to be either progress type or check type');return G},k=aG=>aG.replaceAll('&lt;','<').replaceAll('&gt;','>'),l=(aH,aI=0)=>{const aJ='  '.repeat(aI);if(d(aH)){const aK=aH.map(aL=>l(aL,aI+1));return`{\\n${aJ}  ${aK.join(`,\\n${aJ}  `)}\\n${aJ}}`}if(typeof aH=='object'&&aH!==null){const aM=Object.entries(aH).map(([aN,aO])=>`${aJ}  ${aN} = ${l(aO,aI+1)}`);return`{\\n${aM.join(',\\n')}\\n${aJ}}`}if(c(aH))return JSON.stringify(aH);return`${aH}`},m=aP=>{const aQ=l(aP);return`return ${aQ}`},n=aR=>{const aS=aR.match(e);if(!aS)return;let[,aT,_D,_E,_f]=aS;switch(_E) {case '==':_E='eq';break;case '>':_E='gt';break;case '<':_E='lt';break}try {_f=JSON.parse(_f)} catch {}return{varName:_D,category:aT??'checks',comparator:_E,value:_f}},o=({unparsedText:aU,emotion:aV})=>{const aW=aU.replace(/^!*\\[\\[|\\]\\]!*$/g,''),aX=aW.split('|'),aY={},_F=n(aX[0]);aX.length==1&&(aY.link=aX[0]);_F&&(aY.condition=_F);if(aX.length==2){aY.link=aX[1];!_F&&(aY.text=aX[0])}else aX.length==3&&(aY.link=aX[2],aY.text=aX[1]);aY.text?.startsWith('---')&&(aY.isEnd=!0,aY.text=aY.text.replace(/^---/,''),!aY.text&&delete aY.text);aU.startsWith('!')&&aU.endsWith('!')&&(aY.isUrgent=!0);aV&&(aY.emotion=aV);return aY},p=aZ=>{const bA=[];for(let i=aZ.length-1;i>=0;i--){const bB=aZ[i],bC=bB.match(/!*\\[\\[.+?\\]\\]!*/g),bD=bB.match(g);if(bC){const bE={unparsedText:bC[0]};bD&&(bE.emotion=bD[0].replace(/^\\{\\{|\\}\\}$/g,''));bA.unshift(bE);aZ.splice(i,1)}}if(!bA.length)return;return bA.map(o).sort(bF=>(bF.isUrgent?1:0))},q=bG=>{const bH=[];for(let i=bG.length-1;i>=0;i--){const bI=bG[i],bJ=bI.match(f);if(bJ){const[,bK,bL,bM]=bJ,bN={varName:bL,category:bK??'checks'};try {bN.value=JSON.parse(bM)} catch {bN.value=bM}bH.push(bN);bG.splice(i,1)}}return b(bH).length>0?bH:null},r=bO=>bO.map(bP=>k(bP).trim()).filter(bQ=>!!bQ),s=bR=>{const bS={text:bR.replace(e,'').replace(g,'').replace(h,'').trim()},bT=n(bR),bU=bR.match(g),bV=bR.match(h);bT&&(bS.condition=bT);bU&&(bS.emotion=bU[0].replace(/^\\{\\{|\\}\\}$/g,''));bV&&(bS.name=bV[1]);return bS},t=async bW=>{const bX=r(bW.innerHTML.split('\\n')),bY={},cA=p(bX),cB=q(bX);const bZ=await _(bX);bZ&&(bY.quest=bZ);cA&&(bY.responses=cA.filter(cC=>!!cC.text),bY.redirects=cA.filter(cD=>!cD.text),!bY.responses.length&&delete bY.responses,!bY.redirects.length&&delete bY.redirects);cB&&(bY.props=cB);for(const cE of ['name','pid']){const cF=bW.attributes[cE].value;cF&&(bY[cE]=cF)}bY.tags&&(bY.tags=bY.tags.split(' '));bY.lines=r(bX).map(s);return bY},u=async cG=>{const cH=await Promise.all(Array.prototype.slice.call(cG.getElementsByTagName('tw-passagedata')).map(t));const cI={passages:{},name:cG.attributes.name.value,start_node_name:cH.find(cJ=>cJ.pid==cG.attributes.startnode.value).name};for(const cK of cH)cI.passages[cK.name]={...cK,name:void 0, pid:void 0};return JSON.parse(JSON.stringify(cI))};window.parseTwineToLua=async ()=>document.getElementById('output').innerHTML=m(await u(document.getElementsByTagName('tw-storydata')[0]));\r\n  </script>\r\n  <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\r\n  <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\r\n  <link href=\"https://fonts.googleapis.com/css2?family=Parkinsans:wght@300..800&display=swap\" rel=\"stylesheet\">\r\n  <style>\r\n    body,\r\n    html {\r\n      background-color: #365486;\r\n    }\r\n\r\n    * {\r\n      font-family: \"Parkinsans\", sans-serif;\r\n      color: #7FC7D9;\r\n      box-sizing: border-box;\r\n      margin: 0;\r\n      padding: 0;\r\n    }\r\n\r\n    main {\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n      margin: auto;\r\n      gap: 4em;\r\n      height: 100%;\r\n      max-width: 1000px;\r\n    }\r\n\r\n    .halfOfScreen {\r\n      flex: 1;\r\n      gap: 1em;\r\n      display: flex;\r\n      flex-direction: column;\r\n      justify-content: center;\r\n      align-items: center;\r\n    }\r\n\r\n    #storyData {\r\n      display: none;\r\n    }\r\n\r\n    #output {\r\n      overflow-y: auto;\r\n      text-wrap: wrap;\r\n      padding: 1em;\r\n      background-color: #00000040;\r\n      border-radius: 10px;\r\n      width: 100%;\r\n      color: #7fc7d98f;\r\n    }\r\n\r\n    #unrecognizedNames {\r\n      margin-top: 1em;\r\n      padding: 1em 2em;\r\n      border-radius: 10px;\r\n      color: white;\r\n      width: 100%;\r\n      background-color: #00000040;\r\n    }\r\n\r\n    #unrecognizedNames button {\r\n      margin-top: 0.5em;\r\n    }\r\n\r\n    button {\r\n      width: 180px;\r\n      height: 40px;\r\n      border-radius: 10px;\r\n      font-size: 1em;\r\n      background-color: #7FC7D9;\r\n      color: white;\r\n      border: #DCF2F1 1px solid;\r\n      transition: 0.2s;\r\n      cursor: pointer;\r\n    }\r\n\r\n    button:hover {\r\n      opacity: 0.5;\r\n    }\r\n\r\n    button:active {\r\n      opacity: 0.2;\r\n    }\r\n\r\n    button:disabled {\r\n      opacity: 1;\r\n    }\r\n  </style>\r\n</head>\r\n\r\n<body>\r\n  <main>\r\n    <div class=\"halfOfScreen\">\r\n      <pre id=\"output\"></pre>\r\n      <button onclick=\"copyText()\">Copy output</button>\r\n    </div>\r\n    <div class=\"halfOfScreen\">\r\n      <h3>Unrecognized Names:</h3>\r\n      <ul id=\"unrecognizedNames\">\r\n      </ul>\r\n    </div>\r\n  </main>\r\n\r\n  <div id=\"storyData\">\r\n    {{STORY_DATA}}\r\n  </div>\r\n\r\n  <script>\r\n    const recognizedNames = JSON.parse(localStorage.getItem(\"recognizedNames\") || \"[]\");\r\n    const nameRegex = /@(\\w+)/g;\r\n\r\n    function displayUnrecognizedNames(names) {\r\n      const unrecognizedDiv = document.getElementById(\"unrecognizedNames\");\r\n      unrecognizedDiv.innerHTML = \"\";\r\n\r\n      names.forEach(name => {\r\n        const nameDiv = document.createElement(\"li\");\r\n        nameDiv.textContent = name;\r\n\r\n        const addButton = document.createElement(\"button\");\r\n        addButton.textContent = \"Add to Names\";\r\n        addButton.onclick = () => addToRecognizedNames(name);\r\n\r\n        nameDiv.appendChild(addButton);\r\n        unrecognizedDiv.appendChild(nameDiv);\r\n      });\r\n    }\r\n\r\n    function addToRecognizedNames(name) {\r\n      recognizedNames.push(name);\r\n      localStorage.setItem(\"recognizedNames\", JSON.stringify(recognizedNames));\r\n      findUnrecognizedNames();\r\n    }\r\n\r\n    function findUnrecognizedNames() {\r\n      const text = document.getElementById(\"output\").innerText\r\n      const unrecognized = {};\r\n      [...text.matchAll(nameRegex)].forEach(match => {\r\n        if (recognizedNames.includes(match[1])) return\r\n        unrecognized[match[1]] = true\r\n      });\r\n\r\n      displayUnrecognizedNames(Object.keys(unrecognized));\r\n    }\r\n\r\n    function copyText() {\r\n      const textToCopy = document.getElementById(\"output\").innerText;\r\n      const textarea = document.createElement(\"textarea\");\r\n      textarea.value = textToCopy;\r\n\r\n      document.body.appendChild(textarea);\r\n      textarea.select();\r\n      document.execCommand('copy');\r\n      document.body.removeChild(textarea);\r\n\r\n      const button = document.querySelector('button');\r\n      button.textContent = 'Copied to clipboard';\r\n      button.disabled = true\r\n\r\n      setTimeout(() => {\r\n        button.textContent = 'Copy output';\r\n        button.disabled = false\r\n      }, 1500);\r\n    }\r\n\r\n    parseTwineToLua();\r\n    findUnrecognizedNames(document.getElementById(\"output\").innerText);\r\n  </script>\r\n</body>\r\n\r\n</html>"
});